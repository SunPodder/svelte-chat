#V2
\n\nDEFINE FIELD IF NOT EXISTS username ON user TYPE string VALUE string::lowercase($value) ASSERT string::is::alphanum($value);
DEFINE FIELD IF NOT EXISTS name ON user FLEXIBLE TYPE object;
DEFINE FIELD IF NOT EXISTS avatar ON user TYPE string VALUE string::concat('https://api.dicebear.com/7.x/lorelei/jpg?seed=', $value);
DEFINE FIELD IF NOT EXISTS cover ON user TYPE string VALUE string::concat('https://picsum.photos/seed/', $value, '/800/300');
\n\nDEFINE FIELD IF NOT EXISTS bio ON user TYPE option<string>;
\nDEFINE INDEX IF NOT EXISTS username ON user FIELDS username UNIQUE;
\n\n\nDEFINE SCOPE IF NOT EXISTS user SESSION 7d\n	SIGNIN (\n		SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(password, $password)\n	)\n	SIGNUP (\n		CREATE user CONTENT {\n			username: $username,\n			email: $email,\n			password: crypto::argon2::generate($password),\n            name: $name,\n            avatar: $username,\n            cover: $username,\n            bio: $bio,\n		}\n	);
create user content {email: 'sun@gmail.com', password: 'aaaa', name: {first: 'sun'}, username: 'Sun'}
DEFINE TABLE IF NOT EXISTS user SCHEMAFULL\n	PERMISSIONS\n        FOR update, delete WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS email ON user TYPE string VALUE string::lowercase($value)\n    PERMISSIONS FOR select WHERE id = $auth.id ASSERT string::is::email($value);
DEFINE FIELD IF NOT EXISTS password ON user TYPE string\n    PERMISSIONS FOR select WHERE id = $auth.id;
DEFINE FIELD IF NOT EXISTS created_on ON user VALUE time::now() READONLY\n    PERMISSIONS FOR select WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS username ON user TYPE string VALUE string::lowercase($value) ASSERT string::is::alphanum($value);
DEFINE FIELD IF NOT EXISTS name ON user FLEXIBLE TYPE object;
DEFINE FIELD IF NOT EXISTS avatar ON user TYPE string DEFAULT string::concat('https://api.dicebear.com/7.x/lorelei/jpg?seed=', $value);
DEFINE FIELD IF NOT EXISTS cover ON user TYPE string DEFAULT string::concat('https://picsum.photos/seed/', $value, '/800/300');
\n\nDEFINE FIELD IF NOT EXISTS bio ON user TYPE option<string>;
\nDEFINE INDEX IF NOT EXISTS username ON user FIELDS username UNIQUE;
\n\n\nDEFINE SCOPE IF NOT EXISTS user SESSION 7d\n	SIGNIN (\n		SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(password, $password)\n	)\n	SIGNUP (\n		CREATE user CONTENT {\n			username: $username,\n			email: $email,\n			password: crypto::argon2::generate($password),\n            name: $name,\n            avatar: $username,\n            cover: $username,\n            bio: $bio,\n		}\n	);
create user content {email: 'sun@gmail.com', password: 'aaaa', name: {first: 'sun'}, username: 'Sun'}
DEFINE TABLE IF NOT EXISTS user SCHEMAFULL\n	PERMISSIONS\n        FOR update, delete WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS email ON user TYPE string VALUE string::lowercase($value)\n    PERMISSIONS FOR select WHERE id = $auth.id ASSERT string::is::email($value);
DEFINE FIELD IF NOT EXISTS password ON user TYPE string\n    PERMISSIONS FOR select WHERE id = $auth.id;
DEFINE FIELD IF NOT EXISTS created_on ON user VALUE time::now() READONLY\n    PERMISSIONS FOR select WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS username ON user TYPE string VALUE string::lowercase($value) ASSERT string::is::alphanum($value);
DEFINE FIELD IF NOT EXISTS name ON user FLEXIBLE TYPE object;
DEFINE FIELD IF NOT EXISTS avatar ON user TYPE string DEFAULT string::concat('https://api.dicebear.com/7.x/lorelei/jpg?seed=svelte-chat');
DEFINE FIELD IF NOT EXISTS cover ON user TYPE string DEFAULT string::concat('https://picsum.photos/seed/svelte-chat/800/300');
\n\nDEFINE FIELD IF NOT EXISTS bio ON user TYPE option<string>;
\nDEFINE INDEX IF NOT EXISTS username ON user FIELDS username UNIQUE;
\n\n\nDEFINE SCOPE IF NOT EXISTS user SESSION 7d\n	SIGNIN (\n		SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(password, $password)\n	)\n	SIGNUP (\n		CREATE user CONTENT {\n			username: $username,\n			email: $email,\n			password: crypto::argon2::generate($password),\n            name: $name,\n            avatar: $username,\n            cover: $username,\n            bio: $bio,\n		}\n	);
select * from user
select * from users
DEFINE TABLE IF NOT EXISTS user SCHEMAFULL\n	PERMISSIONS\n        FOR update, delete WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS email ON user TYPE string VALUE string::lowercase($value)\n    PERMISSIONS FOR select WHERE id = $auth.id ASSERT string::is::email($value);
DEFINE FIELD IF NOT EXISTS password ON user TYPE string\n    PERMISSIONS FOR select WHERE id = $auth.id;
DEFINE FIELD IF NOT EXISTS created_on ON user VALUE time::now() READONLY\n    PERMISSIONS FOR select WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS username ON user TYPE string VALUE string::lowercase($value) ASSERT string::is::alphanum($value);
DEFINE FIELD IF NOT EXISTS name ON user FLEXIBLE TYPE object;
DEFINE FIELD IF NOT EXISTS avatar ON user TYPE string DEFAULT string::concat('https://api.dicebear.com/7.x/lorelei/jpg?seed=svelte-chat');
DEFINE FIELD IF NOT EXISTS cover ON user TYPE string DEFAULT string::concat('https://picsum.photos/seed/svelte-chat/800/300');
\n\nDEFINE FIELD IF NOT EXISTS bio ON user TYPE option<string>;
\nDEFINE INDEX IF NOT EXISTS username ON user FIELDS username UNIQUE;
\n\n\nDEFINE SCOPE IF NOT EXISTS user SESSION 7d\n	SIGNIN (\n		SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(password, $password)\n	)\n	SIGNUP (\n		CREATE user CONTENT {\n			username: $username,\n			email: $email,\n			password: crypto::argon2::generate($password),\n            name: $name,\n            avatar: $username,\n            cover: $username,\n            bio: $bio,\n		}\n	);
select * from user
DEFINE TABLE IF NOT EXISTS user SCHEMAFULL\n	PERMISSIONS\n        FOR select FULL\n        FOR update, delete WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS email ON user TYPE string VALUE string::lowercase($value)\n    PERMISSIONS FOR select WHERE id = $auth.id ASSERT string::is::email($value);
DEFINE FIELD IF NOT EXISTS password ON user TYPE string\n    PERMISSIONS FOR select WHERE id = $auth.id;
DEFINE FIELD IF NOT EXISTS created_on ON user VALUE time::now() READONLY\n    PERMISSIONS FOR select WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS username ON user TYPE string VALUE string::lowercase($value) ASSERT string::is::alphanum($value);
DEFINE FIELD IF NOT EXISTS name ON user FLEXIBLE TYPE object;
DEFINE FIELD IF NOT EXISTS avatar ON user TYPE string DEFAULT string::concat('https://api.dicebear.com/7.x/lorelei/jpg?seed=svelte-chat');
DEFINE FIELD IF NOT EXISTS cover ON user TYPE string DEFAULT string::concat('https://picsum.photos/seed/svelte-chat/800/300');
\n\nDEFINE FIELD IF NOT EXISTS bio ON user TYPE option<string>;
\nDEFINE INDEX IF NOT EXISTS username ON user FIELDS username UNIQUE;
\n\n\nDEFINE SCOPE IF NOT EXISTS user SESSION 7d\n	SIGNIN (\n		SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(password, $password)\n	)\n	SIGNUP (\n		CREATE user CONTENT {\n			username: $username,\n			email: $email,\n			password: crypto::argon2::generate($password),\n            name: $name,\n            avatar: $username,\n            cover: $username,\n            bio: $bio,\n		}\n	);
DEFINE TABLE IF NOT EXISTS user SCHEMAFULL\n	PERMISSIONS\n        FOR select FULL\n        FOR update, delete WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS email ON user TYPE string VALUE string::lowercase($value)\n    PERMISSIONS FOR select WHERE id = $auth.id ASSERT string::is::email($value);
DEFINE FIELD IF NOT EXISTS password ON user TYPE string\n    PERMISSIONS FOR select NONE;
DEFINE FIELD IF NOT EXISTS created_on ON user VALUE time::now() READONLY\n    PERMISSIONS FOR select WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS username ON user TYPE string VALUE string::lowercase($value) ASSERT string::is::alphanum($value);
DEFINE FIELD IF NOT EXISTS name ON user FLEXIBLE TYPE object;
DEFINE FIELD IF NOT EXISTS avatar ON user TYPE string DEFAULT string::concat('https://api.dicebear.com/7.x/lorelei/jpg?seed=', $value);
DEFINE FIELD IF NOT EXISTS cover ON user TYPE string DEFAULT string::concat('https://picsum.photos/seed/', $value,'/800/300');
\n\nDEFINE FIELD IF NOT EXISTS bio ON user TYPE option<string>;
\nDEFINE INDEX IF NOT EXISTS username ON user FIELDS username UNIQUE;
\n\n\nDEFINE SCOPE IF NOT EXISTS user SESSION 7d\n	SIGNIN (\n		SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(password, $password)\n	)\n	SIGNUP (\n		CREATE user CONTENT {\n			username: $username,\n			email: $email,\n			password: crypto::argon2::generate($password),\n            name: $name,\n            avatar: $username,\n            cover: $username,\n            bio: $bio,\n		}\n	);
DEFINE TABLE IF NOT EXISTS user SCHEMAFULL\n	PERMISSIONS\n        FOR select FULL\n        FOR update, delete WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS email ON user TYPE string VALUE string::lowercase($value)\n    PERMISSIONS FOR select WHERE id = $auth.id ASSERT string::is::email($value);
DEFINE FIELD IF NOT EXISTS password ON user TYPE string\n    PERMISSIONS FOR select NONE;
DEFINE FIELD IF NOT EXISTS created_on ON user VALUE time::now() READONLY\n    PERMISSIONS FOR select WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS username ON user TYPE string VALUE string::lowercase($value) ASSERT string::is::alphanum($value);
DEFINE FIELD IF NOT EXISTS name ON user FLEXIBLE TYPE object;
DEFINE FIELD IF NOT EXISTS avatar ON user TYPE string DEFAULT '';
DEFINE FIELD IF NOT EXISTS cover ON user TYPE string DEFAULT '';
\n\nDEFINE FIELD IF NOT EXISTS bio ON user TYPE option<string>;
\nDEFINE INDEX IF NOT EXISTS username ON user FIELDS username UNIQUE;
\n\n\nDEFINE SCOPE IF NOT EXISTS user SESSION 7d\n	SIGNIN (\n		SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(password, $password)\n	)\n	SIGNUP (\n		CREATE user CONTENT {\n			username: $username,\n			email: $email,\n			password: crypto::argon2::generate($password),\n            name: $name,\n            avatar: string::concat('https://api.dicebear.com/7.x/lorelei/jpg?seed=', $username),\n            cover: string::concat('https://picsum.photos/seed/', $username,'/800/300'),\n            bio: $bio,\n		}\n	);
DEFINE TABLE IF NOT EXISTS user SCHEMAFULL\n	PERMISSIONS\n        FOR select FULL\n        FOR update, delete WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS email ON user TYPE string VALUE string::lowercase($value)\n    PERMISSIONS FOR select WHERE id = $auth.id ASSERT string::is::email($value);
DEFINE FIELD IF NOT EXISTS password ON user TYPE string\n    PERMISSIONS FOR select NONE;
DEFINE FIELD IF NOT EXISTS created_on ON user VALUE time::now() READONLY\n    PERMISSIONS FOR select WHERE id = $auth.id;
\n\nDEFINE FIELD IF NOT EXISTS username ON user TYPE string VALUE string::lowercase($value) ASSERT string::is::alphanum($value);
DEFINE FIELD IF NOT EXISTS name ON user FLEXIBLE TYPE object;
DEFINE FIELD IF NOT EXISTS avatar ON user TYPE string DEFAULT '';
DEFINE FIELD IF NOT EXISTS cover ON user TYPE string DEFAULT '';
\n\nDEFINE FIELD IF NOT EXISTS bio ON user TYPE option<string>;
\nDEFINE INDEX IF NOT EXISTS username ON user FIELDS username UNIQUE;
\n\n\nDEFINE SCOPE IF NOT EXISTS user SESSION 7d\n	SIGNIN (\n		SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(password, $password)\n	)\n	SIGNUP (\n		CREATE user CONTENT {\n			username: $username,\n			email: $email,\n			password: crypto::argon2::generate($password),\n            name: $name,\n            avatar: string::concat('https://api.dicebear.com/7.x/pixel-art/png?seed=', $username),\n            cover: string::concat('https://picsum.photos/seed/', $username,'/800/300'),\n            bio: $bio,\n		}\n	);
select username from user
select username from user where username ~ sun
select username from user where username = sun
select username from user where username == sun
select username from user where username = sunpodder
select username from user where username = SunPodder
select username from user
select username from user where username == sunpodder
select * from user where username == sunpodder
select * from user where username == 'sunpodder'
select username from user where username ~ "sun"
